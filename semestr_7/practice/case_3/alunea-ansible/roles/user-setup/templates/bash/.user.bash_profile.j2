COLOR_BLACK="\033[0;30m"       # Black color
COLOR_RED="\033[0;31m"         # Red color
COLOR_GREEN="\033[0;32m"       # Green color
COLOR_YELLOW="\033[0;33m"      # Yellow color
COLOR_BLUE="\033[0;34m"        # Blue color
COLOR_MAGENTA="\033[0;35m"     # Magenta color
COLOR_CYAN="\033[0;36m"        # Cyan color
COLOR_WHITE="\033[0;37m"       # White color

# Bright variants
COLOR_BRIGHT_BLACK="\033[1;30m"   # Bright black (gray) color
COLOR_BRIGHT_RED="\033[1;31m"     # Bright red color
COLOR_BRIGHT_GREEN="\033[1;32m"   # Bright green color
COLOR_BRIGHT_YELLOW="\033[1;33m"  # Bright yellow color
COLOR_BRIGHT_BLUE="\033[1;34m"    # Bright blue color
COLOR_BRIGHT_MAGENTA="\033[1;35m" # Bright magenta color
COLOR_BRIGHT_CYAN="\033[1;36m"    # Bright cyan color
COLOR_BRIGHT_WHITE="\033[1;37m"   # Bright white color

# High-intensity colors
COLOR_OCHRE="\033[38;5;95m"      # Ochre color (High intensity)
COLOR_RESET="\033[0m"            # Reset color (used to reset to default terminal color)


#git_color
function git_color {
local git_status="$(git status 2> /dev/null)"

if [[ $git_status =~ "working directory clean" ]]; then
echo -e $COLOR_RED
elif [[ $git_status =~ "Your branch is ahead of" ]]; then
echo -e $COLOR_YELLOW
elif [[ $git_status =~ "nothing to commit" ]]; then
echo -e $COLOR_GREEN
else
echo -e $COLOR_OCHRE
fi
}

#git_branch
function git_branch {
local git_status="$(git status 2> /dev/null)"
local on_branch="On branch ([^${IFS}]*)"
local on_commit="HEAD detached at ([^${IFS}]*)"

if [[ $git_status =~ $on_branch ]]; then
local branch=${BASH_REMATCH[1]}
echo "($branch)"
elif [[ $git_status =~ $on_commit ]]; then
local commit=${BASH_REMATCH[1]}
echo "($commit)"
fi
}

PS1="\[$COLOR_CYAN\]\u\[$COLOR_RESET\]@\[$COLOR_GREEN\]\h\[$COLOR_RESET\]:\[$COLOR_BRIGHT_YELLOW\]\w\[$COLOR_RESET\]"
PS1+="\[\$(git_color)\]\$(git_branch)\[$COLOR_BLUE\]\$\[$COLOR_RESET\] "
export PS1

export LC_ALL=en_US.UTF-8
export CLICOLOR=1
export LS_OPTIONS='--color=auto'
eval "$(dircolors -b)"
alias ls='ls $LS_OPTIONS'